// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: line.proto

#ifndef PROTOBUF_line_2eproto__INCLUDED
#define PROTOBUF_line_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace line {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_line_2eproto();
void protobuf_AssignDesc_line_2eproto();
void protobuf_ShutdownFile_line_2eproto();

class UserData;
class LoginReq;
class LoginRsp;
class RegistUserReq;
class RegistUserRsp;
class VerifyCodeReq;
class VerifyCodeRsp;
class TouchPositionDownReq;
class TouchPositionUpReq;
class TouchPositionMatch;

// ===================================================================

class UserData : public ::google::protobuf::Message {
 public:
  UserData();
  virtual ~UserData();

  UserData(const UserData& from);

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData& default_instance();

  void Swap(UserData* other);

  // implements Message ----------------------------------------------

  UserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string encrypted_psw = 3;
  inline bool has_encrypted_psw() const;
  inline void clear_encrypted_psw();
  static const int kEncryptedPswFieldNumber = 3;
  inline const ::std::string& encrypted_psw() const;
  inline void set_encrypted_psw(const ::std::string& value);
  inline void set_encrypted_psw(const char* value);
  inline void set_encrypted_psw(const char* value, size_t size);
  inline ::std::string* mutable_encrypted_psw();
  inline ::std::string* release_encrypted_psw();
  inline void set_allocated_encrypted_psw(::std::string* encrypted_psw);

  // optional uint64 lover_id = 4;
  inline bool has_lover_id() const;
  inline void clear_lover_id();
  static const int kLoverIdFieldNumber = 4;
  inline ::google::protobuf::uint64 lover_id() const;
  inline void set_lover_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:line.UserData)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_encrypted_psw();
  inline void clear_has_encrypted_psw();
  inline void set_has_lover_id();
  inline void clear_has_lover_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::std::string* user_name_;
  ::std::string* encrypted_psw_;
  ::google::protobuf::uint64 lover_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_line_2eproto();
  friend void protobuf_AssignDesc_line_2eproto();
  friend void protobuf_ShutdownFile_line_2eproto();

  void InitAsDefaultInstance();
  static UserData* default_instance_;
};
// -------------------------------------------------------------------

class LoginReq : public ::google::protobuf::Message {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  LoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string encrypted_psw = 2;
  inline bool has_encrypted_psw() const;
  inline void clear_encrypted_psw();
  static const int kEncryptedPswFieldNumber = 2;
  inline const ::std::string& encrypted_psw() const;
  inline void set_encrypted_psw(const ::std::string& value);
  inline void set_encrypted_psw(const char* value);
  inline void set_encrypted_psw(const char* value, size_t size);
  inline ::std::string* mutable_encrypted_psw();
  inline ::std::string* release_encrypted_psw();
  inline void set_allocated_encrypted_psw(::std::string* encrypted_psw);

  // @@protoc_insertion_point(class_scope:line.LoginReq)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_encrypted_psw();
  inline void clear_has_encrypted_psw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::std::string* encrypted_psw_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_line_2eproto();
  friend void protobuf_AssignDesc_line_2eproto();
  friend void protobuf_ShutdownFile_line_2eproto();

  void InitAsDefaultInstance();
  static LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:line.LoginRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_line_2eproto();
  friend void protobuf_AssignDesc_line_2eproto();
  friend void protobuf_ShutdownFile_line_2eproto();

  void InitAsDefaultInstance();
  static LoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class RegistUserReq : public ::google::protobuf::Message {
 public:
  RegistUserReq();
  virtual ~RegistUserReq();

  RegistUserReq(const RegistUserReq& from);

  inline RegistUserReq& operator=(const RegistUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistUserReq& default_instance();

  void Swap(RegistUserReq* other);

  // implements Message ----------------------------------------------

  RegistUserReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistUserReq& from);
  void MergeFrom(const RegistUserReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string encrypted_psw = 2;
  inline bool has_encrypted_psw() const;
  inline void clear_encrypted_psw();
  static const int kEncryptedPswFieldNumber = 2;
  inline const ::std::string& encrypted_psw() const;
  inline void set_encrypted_psw(const ::std::string& value);
  inline void set_encrypted_psw(const char* value);
  inline void set_encrypted_psw(const char* value, size_t size);
  inline ::std::string* mutable_encrypted_psw();
  inline ::std::string* release_encrypted_psw();
  inline void set_allocated_encrypted_psw(::std::string* encrypted_psw);

  // @@protoc_insertion_point(class_scope:line.RegistUserReq)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_encrypted_psw();
  inline void clear_has_encrypted_psw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::std::string* encrypted_psw_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_line_2eproto();
  friend void protobuf_AssignDesc_line_2eproto();
  friend void protobuf_ShutdownFile_line_2eproto();

  void InitAsDefaultInstance();
  static RegistUserReq* default_instance_;
};
// -------------------------------------------------------------------

class RegistUserRsp : public ::google::protobuf::Message {
 public:
  RegistUserRsp();
  virtual ~RegistUserRsp();

  RegistUserRsp(const RegistUserRsp& from);

  inline RegistUserRsp& operator=(const RegistUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistUserRsp& default_instance();

  void Swap(RegistUserRsp* other);

  // implements Message ----------------------------------------------

  RegistUserRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistUserRsp& from);
  void MergeFrom(const RegistUserRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:line.RegistUserRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_line_2eproto();
  friend void protobuf_AssignDesc_line_2eproto();
  friend void protobuf_ShutdownFile_line_2eproto();

  void InitAsDefaultInstance();
  static RegistUserRsp* default_instance_;
};
// -------------------------------------------------------------------

class VerifyCodeReq : public ::google::protobuf::Message {
 public:
  VerifyCodeReq();
  virtual ~VerifyCodeReq();

  VerifyCodeReq(const VerifyCodeReq& from);

  inline VerifyCodeReq& operator=(const VerifyCodeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyCodeReq& default_instance();

  void Swap(VerifyCodeReq* other);

  // implements Message ----------------------------------------------

  VerifyCodeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyCodeReq& from);
  void MergeFrom(const VerifyCodeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string phone_number = 1;
  inline bool has_phone_number() const;
  inline void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 1;
  inline const ::std::string& phone_number() const;
  inline void set_phone_number(const ::std::string& value);
  inline void set_phone_number(const char* value);
  inline void set_phone_number(const char* value, size_t size);
  inline ::std::string* mutable_phone_number();
  inline ::std::string* release_phone_number();
  inline void set_allocated_phone_number(::std::string* phone_number);

  // optional string verify_code = 2;
  inline bool has_verify_code() const;
  inline void clear_verify_code();
  static const int kVerifyCodeFieldNumber = 2;
  inline const ::std::string& verify_code() const;
  inline void set_verify_code(const ::std::string& value);
  inline void set_verify_code(const char* value);
  inline void set_verify_code(const char* value, size_t size);
  inline ::std::string* mutable_verify_code();
  inline ::std::string* release_verify_code();
  inline void set_allocated_verify_code(::std::string* verify_code);

  // @@protoc_insertion_point(class_scope:line.VerifyCodeReq)
 private:
  inline void set_has_phone_number();
  inline void clear_has_phone_number();
  inline void set_has_verify_code();
  inline void clear_has_verify_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phone_number_;
  ::std::string* verify_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_line_2eproto();
  friend void protobuf_AssignDesc_line_2eproto();
  friend void protobuf_ShutdownFile_line_2eproto();

  void InitAsDefaultInstance();
  static VerifyCodeReq* default_instance_;
};
// -------------------------------------------------------------------

class VerifyCodeRsp : public ::google::protobuf::Message {
 public:
  VerifyCodeRsp();
  virtual ~VerifyCodeRsp();

  VerifyCodeRsp(const VerifyCodeRsp& from);

  inline VerifyCodeRsp& operator=(const VerifyCodeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyCodeRsp& default_instance();

  void Swap(VerifyCodeRsp* other);

  // implements Message ----------------------------------------------

  VerifyCodeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyCodeRsp& from);
  void MergeFrom(const VerifyCodeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:line.VerifyCodeRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_line_2eproto();
  friend void protobuf_AssignDesc_line_2eproto();
  friend void protobuf_ShutdownFile_line_2eproto();

  void InitAsDefaultInstance();
  static VerifyCodeRsp* default_instance_;
};
// -------------------------------------------------------------------

class TouchPositionDownReq : public ::google::protobuf::Message {
 public:
  TouchPositionDownReq();
  virtual ~TouchPositionDownReq();

  TouchPositionDownReq(const TouchPositionDownReq& from);

  inline TouchPositionDownReq& operator=(const TouchPositionDownReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TouchPositionDownReq& default_instance();

  void Swap(TouchPositionDownReq* other);

  // implements Message ----------------------------------------------

  TouchPositionDownReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TouchPositionDownReq& from);
  void MergeFrom(const TouchPositionDownReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 application_width = 1;
  inline bool has_application_width() const;
  inline void clear_application_width();
  static const int kApplicationWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 application_width() const;
  inline void set_application_width(::google::protobuf::uint32 value);

  // optional uint32 application_height = 2;
  inline bool has_application_height() const;
  inline void clear_application_height();
  static const int kApplicationHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 application_height() const;
  inline void set_application_height(::google::protobuf::uint32 value);

  // optional uint32 touchx_in_app = 3;
  inline bool has_touchx_in_app() const;
  inline void clear_touchx_in_app();
  static const int kTouchxInAppFieldNumber = 3;
  inline ::google::protobuf::uint32 touchx_in_app() const;
  inline void set_touchx_in_app(::google::protobuf::uint32 value);

  // optional uint32 touchy_in_app = 4;
  inline bool has_touchy_in_app() const;
  inline void clear_touchy_in_app();
  static const int kTouchyInAppFieldNumber = 4;
  inline ::google::protobuf::uint32 touchy_in_app() const;
  inline void set_touchy_in_app(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:line.TouchPositionDownReq)
 private:
  inline void set_has_application_width();
  inline void clear_has_application_width();
  inline void set_has_application_height();
  inline void clear_has_application_height();
  inline void set_has_touchx_in_app();
  inline void clear_has_touchx_in_app();
  inline void set_has_touchy_in_app();
  inline void clear_has_touchy_in_app();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 application_width_;
  ::google::protobuf::uint32 application_height_;
  ::google::protobuf::uint32 touchx_in_app_;
  ::google::protobuf::uint32 touchy_in_app_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_line_2eproto();
  friend void protobuf_AssignDesc_line_2eproto();
  friend void protobuf_ShutdownFile_line_2eproto();

  void InitAsDefaultInstance();
  static TouchPositionDownReq* default_instance_;
};
// -------------------------------------------------------------------

class TouchPositionUpReq : public ::google::protobuf::Message {
 public:
  TouchPositionUpReq();
  virtual ~TouchPositionUpReq();

  TouchPositionUpReq(const TouchPositionUpReq& from);

  inline TouchPositionUpReq& operator=(const TouchPositionUpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TouchPositionUpReq& default_instance();

  void Swap(TouchPositionUpReq* other);

  // implements Message ----------------------------------------------

  TouchPositionUpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TouchPositionUpReq& from);
  void MergeFrom(const TouchPositionUpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:line.TouchPositionUpReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_line_2eproto();
  friend void protobuf_AssignDesc_line_2eproto();
  friend void protobuf_ShutdownFile_line_2eproto();

  void InitAsDefaultInstance();
  static TouchPositionUpReq* default_instance_;
};
// -------------------------------------------------------------------

class TouchPositionMatch : public ::google::protobuf::Message {
 public:
  TouchPositionMatch();
  virtual ~TouchPositionMatch();

  TouchPositionMatch(const TouchPositionMatch& from);

  inline TouchPositionMatch& operator=(const TouchPositionMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TouchPositionMatch& default_instance();

  void Swap(TouchPositionMatch* other);

  // implements Message ----------------------------------------------

  TouchPositionMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TouchPositionMatch& from);
  void MergeFrom(const TouchPositionMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:line.TouchPositionMatch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_line_2eproto();
  friend void protobuf_AssignDesc_line_2eproto();
  friend void protobuf_ShutdownFile_line_2eproto();

  void InitAsDefaultInstance();
  static TouchPositionMatch* default_instance_;
};
// ===================================================================


// ===================================================================

// UserData

// optional uint64 user_id = 1;
inline bool UserData::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 UserData::user_id() const {
  return user_id_;
}
inline void UserData::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 2;
inline bool UserData::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& UserData::user_name() const {
  return *user_name_;
}
inline void UserData::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void UserData::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void UserData::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserData::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* UserData::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserData::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string encrypted_psw = 3;
inline bool UserData::has_encrypted_psw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData::set_has_encrypted_psw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData::clear_has_encrypted_psw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData::clear_encrypted_psw() {
  if (encrypted_psw_ != &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_->clear();
  }
  clear_has_encrypted_psw();
}
inline const ::std::string& UserData::encrypted_psw() const {
  return *encrypted_psw_;
}
inline void UserData::set_encrypted_psw(const ::std::string& value) {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  encrypted_psw_->assign(value);
}
inline void UserData::set_encrypted_psw(const char* value) {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  encrypted_psw_->assign(value);
}
inline void UserData::set_encrypted_psw(const char* value, size_t size) {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  encrypted_psw_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserData::mutable_encrypted_psw() {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  return encrypted_psw_;
}
inline ::std::string* UserData::release_encrypted_psw() {
  clear_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = encrypted_psw_;
    encrypted_psw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserData::set_allocated_encrypted_psw(::std::string* encrypted_psw) {
  if (encrypted_psw_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypted_psw_;
  }
  if (encrypted_psw) {
    set_has_encrypted_psw();
    encrypted_psw_ = encrypted_psw;
  } else {
    clear_has_encrypted_psw();
    encrypted_psw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 lover_id = 4;
inline bool UserData::has_lover_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData::set_has_lover_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData::clear_has_lover_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData::clear_lover_id() {
  lover_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lover_id();
}
inline ::google::protobuf::uint64 UserData::lover_id() const {
  return lover_id_;
}
inline void UserData::set_lover_id(::google::protobuf::uint64 value) {
  set_has_lover_id();
  lover_id_ = value;
}

// -------------------------------------------------------------------

// LoginReq

// optional string user_name = 1;
inline bool LoginReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LoginReq::user_name() const {
  return *user_name_;
}
inline void LoginReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LoginReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string encrypted_psw = 2;
inline bool LoginReq::has_encrypted_psw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_encrypted_psw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_encrypted_psw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_encrypted_psw() {
  if (encrypted_psw_ != &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_->clear();
  }
  clear_has_encrypted_psw();
}
inline const ::std::string& LoginReq::encrypted_psw() const {
  return *encrypted_psw_;
}
inline void LoginReq::set_encrypted_psw(const ::std::string& value) {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  encrypted_psw_->assign(value);
}
inline void LoginReq::set_encrypted_psw(const char* value) {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  encrypted_psw_->assign(value);
}
inline void LoginReq::set_encrypted_psw(const char* value, size_t size) {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  encrypted_psw_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_encrypted_psw() {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  return encrypted_psw_;
}
inline ::std::string* LoginReq::release_encrypted_psw() {
  clear_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = encrypted_psw_;
    encrypted_psw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_encrypted_psw(::std::string* encrypted_psw) {
  if (encrypted_psw_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypted_psw_;
  }
  if (encrypted_psw) {
    set_has_encrypted_psw();
    encrypted_psw_ = encrypted_psw;
  } else {
    clear_has_encrypted_psw();
    encrypted_psw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginRsp

// optional uint32 result = 1;
inline bool LoginRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 LoginRsp::result() const {
  return result_;
}
inline void LoginRsp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// RegistUserReq

// optional string user_name = 1;
inline bool RegistUserReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegistUserReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegistUserReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegistUserReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& RegistUserReq::user_name() const {
  return *user_name_;
}
inline void RegistUserReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegistUserReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegistUserReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegistUserReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* RegistUserReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegistUserReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string encrypted_psw = 2;
inline bool RegistUserReq::has_encrypted_psw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegistUserReq::set_has_encrypted_psw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegistUserReq::clear_has_encrypted_psw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegistUserReq::clear_encrypted_psw() {
  if (encrypted_psw_ != &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_->clear();
  }
  clear_has_encrypted_psw();
}
inline const ::std::string& RegistUserReq::encrypted_psw() const {
  return *encrypted_psw_;
}
inline void RegistUserReq::set_encrypted_psw(const ::std::string& value) {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  encrypted_psw_->assign(value);
}
inline void RegistUserReq::set_encrypted_psw(const char* value) {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  encrypted_psw_->assign(value);
}
inline void RegistUserReq::set_encrypted_psw(const char* value, size_t size) {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  encrypted_psw_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegistUserReq::mutable_encrypted_psw() {
  set_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_psw_ = new ::std::string;
  }
  return encrypted_psw_;
}
inline ::std::string* RegistUserReq::release_encrypted_psw() {
  clear_has_encrypted_psw();
  if (encrypted_psw_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = encrypted_psw_;
    encrypted_psw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegistUserReq::set_allocated_encrypted_psw(::std::string* encrypted_psw) {
  if (encrypted_psw_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypted_psw_;
  }
  if (encrypted_psw) {
    set_has_encrypted_psw();
    encrypted_psw_ = encrypted_psw;
  } else {
    clear_has_encrypted_psw();
    encrypted_psw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RegistUserRsp

// optional uint32 result = 1;
inline bool RegistUserRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegistUserRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegistUserRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegistUserRsp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 RegistUserRsp::result() const {
  return result_;
}
inline void RegistUserRsp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// VerifyCodeReq

// optional string phone_number = 1;
inline bool VerifyCodeReq::has_phone_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyCodeReq::set_has_phone_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyCodeReq::clear_has_phone_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyCodeReq::clear_phone_number() {
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    phone_number_->clear();
  }
  clear_has_phone_number();
}
inline const ::std::string& VerifyCodeReq::phone_number() const {
  return *phone_number_;
}
inline void VerifyCodeReq::set_phone_number(const ::std::string& value) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(value);
}
inline void VerifyCodeReq::set_phone_number(const char* value) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(value);
}
inline void VerifyCodeReq::set_phone_number(const char* value, size_t size) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyCodeReq::mutable_phone_number() {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  return phone_number_;
}
inline ::std::string* VerifyCodeReq::release_phone_number() {
  clear_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_number_;
    phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyCodeReq::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_number_;
  }
  if (phone_number) {
    set_has_phone_number();
    phone_number_ = phone_number;
  } else {
    clear_has_phone_number();
    phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string verify_code = 2;
inline bool VerifyCodeReq::has_verify_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyCodeReq::set_has_verify_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyCodeReq::clear_has_verify_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyCodeReq::clear_verify_code() {
  if (verify_code_ != &::google::protobuf::internal::kEmptyString) {
    verify_code_->clear();
  }
  clear_has_verify_code();
}
inline const ::std::string& VerifyCodeReq::verify_code() const {
  return *verify_code_;
}
inline void VerifyCodeReq::set_verify_code(const ::std::string& value) {
  set_has_verify_code();
  if (verify_code_ == &::google::protobuf::internal::kEmptyString) {
    verify_code_ = new ::std::string;
  }
  verify_code_->assign(value);
}
inline void VerifyCodeReq::set_verify_code(const char* value) {
  set_has_verify_code();
  if (verify_code_ == &::google::protobuf::internal::kEmptyString) {
    verify_code_ = new ::std::string;
  }
  verify_code_->assign(value);
}
inline void VerifyCodeReq::set_verify_code(const char* value, size_t size) {
  set_has_verify_code();
  if (verify_code_ == &::google::protobuf::internal::kEmptyString) {
    verify_code_ = new ::std::string;
  }
  verify_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyCodeReq::mutable_verify_code() {
  set_has_verify_code();
  if (verify_code_ == &::google::protobuf::internal::kEmptyString) {
    verify_code_ = new ::std::string;
  }
  return verify_code_;
}
inline ::std::string* VerifyCodeReq::release_verify_code() {
  clear_has_verify_code();
  if (verify_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = verify_code_;
    verify_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyCodeReq::set_allocated_verify_code(::std::string* verify_code) {
  if (verify_code_ != &::google::protobuf::internal::kEmptyString) {
    delete verify_code_;
  }
  if (verify_code) {
    set_has_verify_code();
    verify_code_ = verify_code;
  } else {
    clear_has_verify_code();
    verify_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// VerifyCodeRsp

// optional uint32 result = 1;
inline bool VerifyCodeRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyCodeRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyCodeRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyCodeRsp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 VerifyCodeRsp::result() const {
  return result_;
}
inline void VerifyCodeRsp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// TouchPositionDownReq

// optional uint32 application_width = 1;
inline bool TouchPositionDownReq::has_application_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TouchPositionDownReq::set_has_application_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TouchPositionDownReq::clear_has_application_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TouchPositionDownReq::clear_application_width() {
  application_width_ = 0u;
  clear_has_application_width();
}
inline ::google::protobuf::uint32 TouchPositionDownReq::application_width() const {
  return application_width_;
}
inline void TouchPositionDownReq::set_application_width(::google::protobuf::uint32 value) {
  set_has_application_width();
  application_width_ = value;
}

// optional uint32 application_height = 2;
inline bool TouchPositionDownReq::has_application_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TouchPositionDownReq::set_has_application_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TouchPositionDownReq::clear_has_application_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TouchPositionDownReq::clear_application_height() {
  application_height_ = 0u;
  clear_has_application_height();
}
inline ::google::protobuf::uint32 TouchPositionDownReq::application_height() const {
  return application_height_;
}
inline void TouchPositionDownReq::set_application_height(::google::protobuf::uint32 value) {
  set_has_application_height();
  application_height_ = value;
}

// optional uint32 touchx_in_app = 3;
inline bool TouchPositionDownReq::has_touchx_in_app() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TouchPositionDownReq::set_has_touchx_in_app() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TouchPositionDownReq::clear_has_touchx_in_app() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TouchPositionDownReq::clear_touchx_in_app() {
  touchx_in_app_ = 0u;
  clear_has_touchx_in_app();
}
inline ::google::protobuf::uint32 TouchPositionDownReq::touchx_in_app() const {
  return touchx_in_app_;
}
inline void TouchPositionDownReq::set_touchx_in_app(::google::protobuf::uint32 value) {
  set_has_touchx_in_app();
  touchx_in_app_ = value;
}

// optional uint32 touchy_in_app = 4;
inline bool TouchPositionDownReq::has_touchy_in_app() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TouchPositionDownReq::set_has_touchy_in_app() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TouchPositionDownReq::clear_has_touchy_in_app() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TouchPositionDownReq::clear_touchy_in_app() {
  touchy_in_app_ = 0u;
  clear_has_touchy_in_app();
}
inline ::google::protobuf::uint32 TouchPositionDownReq::touchy_in_app() const {
  return touchy_in_app_;
}
inline void TouchPositionDownReq::set_touchy_in_app(::google::protobuf::uint32 value) {
  set_has_touchy_in_app();
  touchy_in_app_ = value;
}

// -------------------------------------------------------------------

// TouchPositionUpReq

// -------------------------------------------------------------------

// TouchPositionMatch


// @@protoc_insertion_point(namespace_scope)

}  // namespace line

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_line_2eproto__INCLUDED
